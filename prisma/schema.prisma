generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  email               String?           @unique
  emailVerified       DateTime?
  image               String?
  bannerImage         String?
  username            String?           @unique
  password            String?
  birthdate           DateTime?
  bio                 String?
  pronoun             String?
  location            String?
  website             String?
  socialLinks         Json?
  language            String?           @default("en")
  theme               String?           @default("system")
  termsAccepted       Boolean           @default(false)
  marketingOptIn      Boolean           @default(false)
  isProfileComplete   Boolean           @default(false)
  provider            String?
  unreadNotifications Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  lastLogin           DateTime?
  preferences         Json?             @default("{\"privacySettings\": {\"showEmail\": false, \"showLocation\": false, \"allowMessages\": false, \"publicProfile\": false}, \"emailNotifications\": {\"newLike\": false, \"newChapter\": false, \"newComment\": false, \"newFollower\": false}}")
  donationLink        String?
  donationMethod      String?
  donationsEnabled    Boolean           @default(false)
  country             String?           @default("US")
  accounts            Account[]
  bookmarks           Bookmark[]
  chapterViews        ChapterView[]
  comments            Comment[]
  commentLikes        CommentLike[]
  donationsMade       Donation[]        @relation("DonationsMade")
  donationsReceived   Donation[]        @relation("DonationsReceived")
  following           Follow[]          @relation("Following")
  followers           Follow[]          @relation("Followers")
  likes               Like[]
  notificationsActed  Notification[]    @relation("NotificationActor")
  readingProgresses   ReadingProgress[]
  sessions            Session[]
  stories             Story[]
  storyViews          StoryView[]

  @@index([email])
  @@index([username])
  @@index([provider])
  @@index([isProfileComplete])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([expires])
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([expires])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  content   Json?
  actorId   String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  actor     User?    @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([actorId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

model NotificationBatch {
  id        String   @id @default(cuid())
  type      String
  status    String   // 'processing', 'completed', 'failed'
  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum License {
  ALL_RIGHTS_RESERVED
  CC_BY
  CC_BY_SA
  CC_BY_NC
  CC_BY_ND
  CC_BY_NC_SA
  CC_BY_NC_ND
  CC0
}

model Story {
  id              String                @id @default(cuid())
  title           String
  slug            String                @unique
  description     String?
  coverImage      String?
  isMature        Boolean               @default(false)
  status          String                @default("ongoing")
  license         License               @default(ALL_RIGHTS_RESERVED)
  wordCount       Int                   @default(0)
  readCount       Int                   @default(0)
  authorId        String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  genreId         String?
  languageId      String?
  bookmarks       Bookmark[]
  chapters        Chapter[]
  comments        Comment[]
  donations       Donation[]
  likes           Like[]
  author          User                  @relation(fields: [authorId], references: [id])
  genre           Genre?                @relation(fields: [genreId], references: [id])
  language        Language?             @relation(fields: [languageId], references: [id])
  recommendedIn   StoryRecommendation[] @relation("RecommendedTo")
  recommendations StoryRecommendation[] @relation("StoryRecommendations")
  tags            StoryTag[]
  views           StoryView[]

  @@index([authorId])
  @@index([status])
  @@index([createdAt])
}

model Chapter {
  id                String            @id @default(cuid())
  title             String
  contentKey        String
  number            Int
  wordCount         Int               @default(0)
  isPremium         Boolean           @default(false)
  status            String            @default("draft")
  publishDate       DateTime?
  readCount         Int               @default(0)
  storyId           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  story             Story             @relation(fields: [storyId], references: [id], onDelete: Cascade)
  views             ChapterView[]
  readingProgresses ReadingProgress[]
  comments          Comment[]
  likes             Like[]

  @@unique([storyId, number])
  @@index([storyId])
  @@index([status])
  @@index([publishDate])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  userId    String
  storyId   String
  chapterId String?
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parent    Comment?      @relation("CommentToReply", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentToReply")
  story     Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapter   Chapter?      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])
  likes     CommentLike[]

  @@index([userId])
  @@index([storyId])
  @@index([chapterId])
  @@index([parentId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  chapterId String?
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  // Add unique constraint for userId and storyId when chapterId is null
  @@unique([userId, storyId, chapterId], name: "userId_storyId_chapterId_unique")
  @@index([userId])
  @@index([storyId])
  @@index([chapterId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model ReadingProgress {
  id        String   @id @default(cuid())
  progress  Float    @default(0)
  userId    String
  chapterId String
  lastRead  DateTime @default(now())
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Tag {
  id      String     @id @default(cuid())
  name    String     @unique
  slug    String?    @unique    // URL‑safe, e.g. “rom‑com”
  stories StoryTag[]

  @@index([slug])
}

model StoryTag {
  id      String @id @default(cuid())
  storyId String
  tagId   String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([storyId, tagId])
  @@index([tagId])
}

model Genre {
  id      String  @id @default(cuid())
  name    String  @unique
  stories Story[]
}

model Language {
  id      String  @id @default(cuid())
  name    String  @unique
  stories Story[]
}

model Donation {
  id                    String   @id @default(cuid())
  amount                Int
  message               String?
  status                String   @default("pending")
  stripePaymentIntentId String?  @unique
  donorId               String
  recipientId           String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  storyId               String?
  paymentMethod         String?
  paypalOrderId         String?
  donor                 User     @relation("DonationsMade", fields: [donorId], references: [id])
  recipient             User     @relation("DonationsReceived", fields: [recipientId], references: [id])
  story                 Story?   @relation(fields: [storyId], references: [id])

  @@index([donorId])
  @@index([recipientId])
  @@index([storyId])
  @@index([status])
  @@index([createdAt])
  @@index([paypalOrderId])
}

model StoryRecommendation {
  id                 String   @id @default(cuid())
  storyId            String
  recommendedStoryId String
  score              Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  recommendedStory   Story    @relation("RecommendedTo", fields: [recommendedStoryId], references: [id], onDelete: Cascade)
  story              Story    @relation("StoryRecommendations", fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, recommendedStoryId])
  @@index([storyId])
  @@index([recommendedStoryId])
  @@index([score])
}

model StoryView {
  id          String   @id @default(cuid())
  userId      String?
  storyId     String
  clientIp    String?
  userAgent   String?
  isFirstView Boolean  @default(false)
  createdAt   DateTime @default(now())
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([storyId])
  @@index([storyId, createdAt])
  @@index([userId, storyId])
}

model ChapterView {
  id          String   @id @default(cuid())
  userId      String?
  chapterId   String
  clientIp    String?
  userAgent   String?
  isFirstView Boolean  @default(false)
  createdAt   DateTime @default(now())
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([chapterId])
  @@index([chapterId, createdAt])
  @@index([userId, chapterId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
