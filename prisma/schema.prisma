generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String  // OAuth or credentials
  provider           String  // google, facebook, etc.
  providerAccountId  String  // ID from the OAuth provider
  refresh_token      String? @db.Text  // Changed to Text for longer tokens
  access_token       String? @db.Text  // Changed to Text for longer tokens
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text  // Changed to Text for longer tokens
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  username          String?   @unique
  password          String?   // Hashed password for credentials auth
  birthdate         DateTime?
  bio               String?   @db.Text  // Changed to Text for longer bios
  pronoun           String?
  termsAccepted     Boolean   @default(false)
  marketingOptIn    Boolean   @default(false)
  isProfileComplete Boolean   @default(false)
  provider          String?   // Primary OAuth provider if any
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLogin         DateTime?
  accounts          Account[]
  sessions          Session[]
  notifications     Notification[]

  @@index([email])
  @@index([username])
  @@index([provider])  // Added index for provider queries
  @@index([isProfileComplete])  // Added index for profile completion queries
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([expires])  // Added index for token cleanup
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Type of notification (e.g., "comment", "like", "follow")
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}
