generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String  // OAuth or credentials
  provider           String  // google, facebook, etc.
  providerAccountId  String  // ID from the OAuth provider
  refresh_token      String? @db.Text  // Changed to Text for longer tokens
  access_token       String? @db.Text  // Changed to Text for longer tokens
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text  // Changed to Text for longer tokens
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  username            String?   @unique
  password            String?
  birthdate           DateTime?
  bio                 String?
  pronoun             String?
  location            String?
  website             String?
  socialLinks         Json?     // For storing Twitter, Instagram, etc.
  language            String?   @default("en")
  theme               String?   @default("system")
  termsAccepted       Boolean   @default(false)
  marketingOptIn      Boolean   @default(false)
  isProfileComplete   Boolean   @default(false)
  provider            String?   // Primary OAuth provider if any
  unreadNotifications Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastLogin           DateTime?
  accounts            Account[]
  sessions            Session[]
  notifications       Notification[]
  preferences         Json?     @default("{\"emailNotifications\":{\"newFollower\":false,\"newComment\":false,\"newLike\":false,\"newChapter\":false},\"privacySettings\":{\"publicProfile\":false,\"showEmail\":false,\"showLocation\":false,\"allowMessages\":false}}")

  // Story management relations
  stories             Story[]
  comments            Comment[]
  likes               Like[]
  bookmarks           Bookmark[]
  readingProgresses   ReadingProgress[]

  // Social relations
  followers           Follow[] @relation("Followers")
  following           Follow[] @relation("Following")

  @@index([email])
  @@index([username])
  @@index([provider])  // Added index for provider queries
  @@index([isProfileComplete])  // Added index for profile completion queries
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([expires])  // Added index for token cleanup
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Type of notification (e.g., "comment", "like", "follow")
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

// Story Management Models

model Story {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?   @db.Text
  coverImage  String?
  genre       String?
  language    String    @default("en")
  isMature    Boolean   @default(false)
  isDraft     Boolean   @default(true)
  status      String    @default("ongoing") // "ongoing" or "completed"
  wordCount   Int       @default(0)
  readCount   Int       @default(0)

  authorId    String
  author      User      @relation(fields: [authorId], references: [id])

  chapters    Chapter[]
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([genre])
  @@index([isDraft])
  @@index([status])
  @@index([createdAt])
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  contentKey  String    // S3 object key for content
  number      Int
  wordCount   Int       @default(0)
  isPremium   Boolean   @default(false)
  isDraft     Boolean   @default(true) // Individual chapter draft status
  publishDate DateTime?  // For scheduled publishing
  readCount   Int       @default(0)

  storyId     String
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  readingProgresses ReadingProgress[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([storyId, number])
  @@index([storyId])
  @@index([isDraft])
  @@index([publishDate])
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text

  userId      String
  user        User      @relation(fields: [userId], references: [id])

  storyId     String
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  parentId    String?
  parent      Comment?  @relation("CommentToReply", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentToReply")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([storyId])
  @@index([parentId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model ReadingProgress {
  id        String   @id @default(cuid())
  progress  Float    @default(0) // 0-100 percentage

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  lastRead  DateTime @default(now())

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
}

model Follow {
  id           String   @id @default(cuid())
  followerId   String
  follower     User     @relation("Following", fields: [followerId], references: [id])
  followingId  String
  following    User     @relation("Followers", fields: [followingId], references: [id])
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
